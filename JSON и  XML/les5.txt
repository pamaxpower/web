Основные форматы передачи данных .json

API - программа, который реализует интерфейс

Два стиля:
Soap - Simple Object Access Protocol - стандартизированный протокол, который 
отправляет сообщения с использованием других протоколов, таких как HTTP и др

Rest - Representational State Transfer - не протокол, а архитектурный стиль,
который устанавливает набор рекомендаций, которым необходимо следовать, 
если вы хотите предоставить веб-службе RESTful, например, существование 
без сохранения состояния и использования кодов состояния HTTP.

Для soap и rest-запросов используются два наиболее популярных формата 
передачи данных:
* XML - используется в SOAP(всегда) и REST(реже)
* JSON - используется только в REST-запросах


** XML **
- eXtensible Markup Language - расширяемый язык разметки
- похож на HTML 
- используется для храниения и передачи данных. так что 
увидеть его можно не только в API, но и в коде

XSD-схема
- XML Schema Definition - описание вашего XML
- проще говоря это ТЗ на языке машины
 для SOAP метода:
 - какие поля будут в запросе
 - какие поля будут в ответе
 - какие типы данных у каждого поля
 - какие поля обязательны для заполнения, а какие нет
 - есть ли у поля значение по умолчанию и какое оно 
 - есть ли у поля ограничение по длине
 - есть ли у поля другие параметры
 - какая у запроса структура по вложенности элементов
 - и др

Правила well formed XML:
* есть корневой элемент
* у каждого элемента есть закрывающийся тег
* теги регистрозависимы         // строчные и прописные буквы это разные символы
* соблюдается ли правильная вложенность элементов
* атрибуты оформлены в кавычках


** JSON **
- JavaScpipt Object Notation - текстовый формат обмена данными, основанный на JavaScript. 
Но при этом формат независим от JS и может использоваться в любом ЯП
- легче читается
- объект заключается в {}
- json-объект это неупорядоченное множество пар: "ключ: значение", где
ключ - это название параметра, который мы передаем серверу и служащий маркером 
для принимающей системы

Правила well formed JSON:
* данные написаны в виде пар <<ключ: значение>>
* данные разделены запятыми
* объект находится внутри фигурных скобок {}
* массив - внутри квадратных []

Запросы:
GET - открытый запрос к открытым данным, без защиты
POST - через авторизацию

примеры запросов:
* показать статью - GET
* получить данные от пользователя - POST
* чтото удалить - get

